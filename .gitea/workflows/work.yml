
name: cwxgoweb

on:
  push:
    branches: [ dev ]

jobs:
  hugo-task:
    runs-on: ubuntu-latest

    container:
      # 不使用默认的 node:16 的基础容器镜像, 使用支持docker的act镜像
      image: registry.services.wait/cwx/catthehacker/ubuntu:act-22.04
      # volumes:

    steps:
      - name: set ca
        # 注意这个位置单独拉出去, 是因为多行字符串会被解析为多行命令导致, 是个 bug
        run: echo -e "${{ secrets.CWX_CA_PEM }}" >> /usr/local/share/ca-certificates/cwx.crt


      - name: Set run env
        run: |
          update-ca-certificates

          # git config --global http.sslVerify false
          git config --global http.sslCAInfo /usr/local/share/ca-certificates/cwx.crt
          git --version


      - name: login registry
        run: |
          echo "${{ secrets.HARBOR_PW }}" | docker login -u "${{ secrets.HARBOR_USER }}" --password-stdin registry.services.wait
          docker pull registry.services.wait/cwx/cwx-build:v1.1


      - name: clone code
        run: |
          git clone https://chenwx:${{secrets.CHENWX_TOKEN}}@git.services.wait/chenwx/cwxgoweb.git .


      - name: 编译
        uses: docker://registry.services.wait/cwx/cwx-build:v1.1
        with:
          cmd: |
            go env -w GOPROXY=http://nexus.services.wait/repository/proxy-go/
            go env -w GOSUMDB=off
            export CGO_ENABLED=0
            go build -o cwxgoweb src/main.go
            ls -a


        # # 挂载编译缓存
        # volumes:
        # - name: gopath-cache
        #   path: /go
        # commands:
        #   - go env -w GOPROXY=http://nexus.services.wait/repository/proxy-go/
        #   - go env -w GOSUMDB=off
        #   - export CGO_ENABLED=0
        #   - go build -o cwxgoweb src/main.go
        #   # - go build -o cwxgoweb -ldflags '-s -w' src/main.go
        #   - ls -a




      # - name: 编译-build
      #   uses: docker://registry.services.wait/cwx/actions-hugo:ubuntu-v0.118

      # - name: 测试-test
      #   run: |
      #     ls public/

      # - name: 发布-deploy
      #   uses: docker://registry.services.wait/cwx/ssh-scp-action:v1
      #   with:
      #     key: ${{ secrets.ED25519_KEY }}
      #     host: 10.2.1.5
      #     port: 22
      #     user: wait
      #     ssh_before: |
      #       rm -rf /data/nfs_private/blog-web-data/blog/*
      #     scp: |
      #       public/* wait@10.2.1.5:/data/nfs_private/blog-web-data/blog/

          # then run these commands
          # ssh_after: |
          #   echo $HELLO
          #   echo $MESSAGE
          #   ls -lath
